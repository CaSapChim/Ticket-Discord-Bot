import { StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ActionRowBuilder, EmbedBuilder, ComponentType } from "discord.js";
import { ButtonStandardComponent } from "../../component";
import ticketModel from "../../database/models/ticketModel";
import ticketResolveModel from "../../database/models/ticketResolveModel";

export default {
    name: "close",

    callback: async (client, interaction, customId, message) => {
        const menuPickResolve = new StringSelectMenuBuilder()
            .setCustomId("pick")
            .setMinValues(1)
            .setMaxValues(3)
            .setPlaceholder("‚ü© Ch·ªçn ng∆∞·ªùi gi·∫£i quy·∫øt ticket.")
            .setOptions([
                new StringSelectMenuOptionBuilder()
                    .setValue("id ca")
                    .setLabel("H√†u P√©o")
                    .setEmoji("ü•õ"),
                new StringSelectMenuOptionBuilder()
                    .setValue("id hau")
                    .setLabel("H√†u P√©o")
                    .setEmoji("ü•õ"),
                new StringSelectMenuOptionBuilder()
                    .setValue("id vet")
                    .setLabel("H√†u P√©o")
                    .setEmoji("ü•õ"),
            ]);

        const rowMenu = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(menuPickResolve);

        const pickResolveEmbed = new EmbedBuilder()
            .setAuthor({ name: interaction.user.tag, iconURL: interaction.user.avatarURL()! })
            .setTitle("Ch·ªçn ng∆∞·ªùi gi·∫£i quy·∫øt ticket!")

        const msg = await message?.edit({ embeds: [pickResolveEmbed], components: [rowMenu] });

        const menuCollector = msg?.createMessageComponentCollector({
            componentType: ComponentType.StringSelect
        });

        menuCollector?.on('collect', async menuInteraction => {
            const ticketData = await ticketModel.findOne({ guildId: menuInteraction.guildId });
            if (!ticketData) throw new Error("c√≥ l·ªói trong pick menu");

            for (const userId of menuInteraction.values) {
                const ticketResolveData = await ticketResolveModel.findOne({ userId: userId }) || new ticketResolveModel({ guildId: menuInteraction.guildId, userId: userId });

                ticketResolveData.ticketResolved.push({
                    from: interaction.user.id,
                    type: client.ticketModals.get(interaction.user.id) || "unknown",
                    at: new Date().toISOString()
                })
            }

            await msg?.edit({ content: "C·∫£m ∆°n b·∫°n! Ch√∫c b·∫°n 1 ng√†y t·ªët l√†nh", embeds: [], components: [] });

            client.ticketModals.delete(interaction.user.id);
        });
    },

} as const as ButtonStandardComponent;